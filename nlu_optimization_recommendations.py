#!/usr/bin/env python3
"""
NLU Optimization Recommendations
‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û NLU ‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ
"""

OPTIMIZATION_RECOMMENDATIONS = {
    "immediate_fixes": {
        "1_reduce_prompt_size": {
            "problem": "INTENT_DETECTION_PROMPT ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î 110+ ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡∏™‡πà‡∏á token ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ",
            "solution": "‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô prompt ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1-2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏±‡πâ‡∏ô ‡πÜ",
            "impact": "‡∏•‡∏î token 60-70%",
            "code_location": "src/llm/node/nlu_llm.py:20-110"
        },
        "2_disable_debug_output": {
            "problem": "‡∏û‡∏¥‡∏°‡∏û‡πå context ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ä‡πâ‡∏≤",
            "solution": "‡∏õ‡∏¥‡∏î debug output ‡πÉ‡∏ô production ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ logger level",
            "impact": "‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 100-300ms",
            "code_location": "src/llm/node/nlu_llm.py:200-209"
        },
        "3_reduce_timeout": {
            "problem": "Timeout 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ",
            "solution": "‡∏•‡∏î timeout ‡πÄ‡∏õ‡πá‡∏ô 10-15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ",
            "impact": "‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô",
            "code_location": "src/llm/node/nlu_llm.py:220"
        }
    },
    
    "medium_term_fixes": {
        "4_optimize_model": {
            "problem": "google/gemini-2.5-flash-lite ‡∏≠‡∏≤‡∏à‡∏ä‡πâ‡∏≤",
            "solution": "‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ model ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô gpt-4o-mini, claude-3-haiku",
            "impact": "‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 30-50%",
            "code_location": "config.yaml:10"
        },
        "5_simplify_parsing": {
            "problem": "PyParsing ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô",
            "solution": "‡πÉ‡∏ä‡πâ JSON format ‡πÅ‡∏ó‡∏ô custom delimiter",
            "impact": "‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ parsing 50-80%",
            "code_location": "src/llm/node/nlu_llm.py:293-314"
        },
        "6_add_caching": {
            "problem": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            "solution": "‡πÄ‡∏û‡∏¥‡πà‡∏° Redis cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NLU result",
            "impact": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 95%",
            "implementation": "‡πÉ‡∏ä‡πâ message hash ‡πÄ‡∏õ‡πá‡∏ô cache key"
        }
    },
    
    "advanced_optimizations": {
        "7_async_processing": {
            "problem": "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö blocking",
            "solution": "‡πÉ‡∏ä‡πâ async/await ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LLM calls",
            "impact": "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á concurrency",
            "complexity": "‡∏™‡∏π‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç architecture"
        },
        "8_model_quantization": {
            "problem": "‡πÉ‡∏ä‡πâ cloud LLM ‡∏°‡∏µ network latency",
            "solution": "‡πÉ‡∏ä‡πâ local quantized model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö classification",
            "impact": "‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 70-90%",
            "complexity": "‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å - ‡∏ï‡πâ‡∏≠‡∏á infrastructure ‡πÄ‡∏û‡∏¥‡πà‡∏°"
        },
        "9_batch_processing": {
            "problem": "‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
            "solution": "‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ LLM ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô",
            "impact": "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á throughput",
            "complexity": "‡∏Å‡∏•‡∏≤‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç flow"
        }
    }
}

def print_optimization_plan():
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    print("üöÄ NLU OPTIMIZATION PLAN")
    print("="*80)
    
    for category, fixes in OPTIMIZATION_RECOMMENDATIONS.items():
        print(f"\nüìã {category.replace('_', ' ').title()}:")
        print("-" * 50)
        
        for fix_id, details in fixes.items():
            print(f"\n{fix_id.replace('_', '. ').title()}:")
            print(f"   Problem: {details['problem']}")
            print(f"   Solution: {details['solution']}")
            print(f"   Impact: {details['impact']}")
            if 'code_location' in details:
                print(f"   Location: {details['code_location']}")
            if 'complexity' in details:
                print(f"   Complexity: {details['complexity']}")

# Quick Fixes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
QUICK_FIXES = {
    "optimized_prompt": '''
# ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà INTENT_DETECTION_PROMPT ‡∏î‡πâ‡∏ß‡∏¢ version ‡∏™‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ:

INTENT_DETECTION_PROMPT = """
Analyze this Thai message for intent, entities, language, and sentiment.

Available intents: {default_intent}, {additional_intent}
Available entities: {default_entity}, {additional_entity}

Return format:
(intent{tuple_delimiter}<name>{tuple_delimiter}<confidence>{tuple_delimiter}<priority>{tuple_delimiter}<metadata>)
{record_delimiter}
(entity{tuple_delimiter}<type>{tuple_delimiter}<value>{tuple_delimiter}<confidence>{tuple_delimiter}<metadata>)
{record_delimiter}
(language{tuple_delimiter}<iso_code>{tuple_delimiter}<confidence>{tuple_delimiter}<primary_flag>{tuple_delimiter}<metadata>)
{record_delimiter}
(sentiment{tuple_delimiter}<label>{tuple_delimiter}<confidence>{tuple_delimiter}<metadata>)
{completion_delimiter}

Text: {input_text}
Output:
"""
''',
    
    "disable_debug": '''
# ‡πÉ‡∏ô src/llm/node/nlu_llm.py ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î 200-209
# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å:
print("\\n" + "="*60)
print("üß† NLU Analysis Context")
# ‡πÄ‡∏õ‡πá‡∏ô:
if logger.level <= 10:  # DEBUG level only
    print("\\n" + "="*60)
    print("üß† NLU Analysis Context")
''',
    
    "faster_timeout": '''
# ‡πÉ‡∏ô src/llm/node/nlu_llm.py ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î 220
# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å:
signal.alarm(30)  # 30 second alarm
# ‡πÄ‡∏õ‡πá‡∏ô:
signal.alarm(10)  # 10 second alarm
''',
    
    "config_optimization": '''
# ‡πÉ‡∏ô config.yaml ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô model:
classification:
  model: "openai/gpt-4o-mini"  # ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ gemini
  temperature: 0.1
'''
}

def print_quick_fixes():
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"""
    print("\n‚ö° QUICK FIXES (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)")
    print("="*80)
    
    for fix_name, code in QUICK_FIXES.items():
        print(f"\nüîß {fix_name.replace('_', ' ').title()}:")
        print(code)

if __name__ == "__main__":
    print_optimization_plan()
    print_quick_fixes()
    
    print("\nüéØ RECOMMENDED ACTION PLAN:")
    print("="*80)
    print("1. ‚úÖ ‡∏£‡∏±‡∏ô performance_test_nlu.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
    print("2. ‚ö° ‡πÉ‡∏ä‡πâ Quick Fixes (‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 60-80%)")
    print("3. üìä ‡∏£‡∏±‡∏ô test ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
    print("4. üîÑ ‡∏ó‡∏≥ Medium-term fixes ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô")
    print("5. üöÄ Advanced optimizations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production")